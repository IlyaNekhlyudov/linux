================1 задание================
1) 
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT

2)
sudo apt-get install nginx
sudo nano /etc/nginx/conf.d/ilya-ubuntu.conf
sudo apt install curl
curl localhost -H "Host: ubuntu"

Заполнил конфиг по заданию.
sudo nano /etc/nginx/conf.d/ilya-ubuntu.conf
sudo systemctl reload nginx

Проверяю:
curl -D - localhost -H "Host: ubuntu" -H "user: Ilya"

3)
server {

 listen 80;
 server_name ubuntu;

 location / {
   if ($http_user != "") {
     add_header HELLO "hello, $http_user";
     return 200 "HTTP POST";
   }
   return 404 "Page not found";
 }

 location /admin {
   return 200 "admin";
 }

}

================2 задание================
1)
Самоподписанный SSL-сертификат, это сертификат который выпускается моментально, центр сертификации не аккредитован. Как пример, Let's Encrypt.
Страховой ответственности за взлом приватного ключа они не несут в отличие от корневых центров сертификации (того же GlobalSign).
Доверия к таким SSL-сертификатам мало, хотя некоторые браузеры нормально воспринимают LE.
При заказе указываются данные, на которые будет выдаваться SSL

sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt

Дальше нужно сделать ключи Диффи-Хеллмана для поддержки PFS:
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

sudo nano /etc/nginx/snippets/self-signed.conf

туда:
ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

sudo nano /etc/nginx/snippets/ssl-params.conf

Настраиваем DNS-распознаватель
sudo nano /etc/nginx/snippets/ssl-params.conf

туда:

# from https://cipherli.st/
# and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
ssl_dhparam /etc/ssl/certs/dhparam.pem;

2) 
sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
sudo nano /etc/nginx/sites-available/default

________________________________________
Конфиг сюда же приложу. Мне кажется, так удобнее будет:


server {
        #listen 80 default_server;
        #listen [::]:80 default_server;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }
        return 302 https://$server_name$request_uri;
 }

 server {
        # SSL configuration
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        include snippets/self-signed.conf;
        include snippets/ssl-params.conf;
        listen 80 default_server;
        listen [::]:80 default_server;

 ....
 тут всё как и было

 соответственно, сверху идёт временный редирект, а снизу сам https.

________________________________________

3) 
Ошибку браузер вывел: NET::ERR_CERT_AUTHORITY_INVALID

В пути сертификации: Нет доверия к этому корневому сертификату центра сертификации, поскольку он не найден в хранилище доверенных корневых сертификатов центров сертификации.

4) 
Большинство используют как раз ассиметричное шифрование, одно из них RSA.
Минусом ассиметричного шифрования является скорость шифрования/дешифрования, но немаловажным плюс - можно свободно делиться открытым ключом и любой может отправить тебе тайное сообщение.

Что в свою очередь нельзя делать с симметричным шифрованием, когда имея ключ можно дешифровать данные.

Не могу рассуждать на тему симметричного шифрования, ведь как показывает практика, практически везде используется ассиметричное. Взять тот же GeekBrains, который использует RSA от Comodo. 
Или Google, он использует ECC (тоже ассиметричное шифрование). 

